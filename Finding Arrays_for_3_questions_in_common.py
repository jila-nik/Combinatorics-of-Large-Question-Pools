# -*- coding: utf-8 -*-
"""Arrays for 3 Questions in Common

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cS8cdPfUO1u_mCXYztatwi7dpXm4p7UZ
"""

import numpy as np
import pandas as pd
import os
# This code creates arrays for n^4 assessment variants with at most
#########################################################################################
n=5
n = int(input("Enter the size of each question pool: (2,3,4,5,7,8,9,11,13,17 or 19 are accpeted only)"))
checking=False # If you want to verify the statement of theorem for the above values, turn this to true and good luck. It may take a few hours for c=2 and big n. Otherwise, a file with all arrays is created.
##########################################################################################
ct=n*n*n*n
#########################################################################################
cols=[]
numbtxt=["zero", "one", "two", "three", "four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"]
for i in range(n+1):
 cols.append(numbtxt[i]) 
rows = []
if (n==3) or (n==5) or (n==7) or (n==11) or (n==13) or (n==17) or (n==19):
 for k in range(n):
  for i in range(n):
    for  j in range(n):
        for l in range(n):
          gen=[]
          gen=[i,l,(i+j+k+l)%n,(i+2*j+4*k+8*l)%n,(i+3*j+9*k+27*l)%n,(i+4*j+16*k+64*l)%n,(i+5*j+25*k+125*l)%n,(i+6*j+36*k+216*l)%n,(i+7*j+49*k+343*l)%n,(i+8*j+64*k+512*l)%n,(i+9*j+81*k+729*l)%n,(i+10*j+100*k+1000*l)%n,(i+11*j+121*k+1320*l)%n,(i+12*j+144*k+1728*l)%n,(i+13*j+169*k+2197*l)%n,(i+14*j+196*k+2744*l)%n,(i+15*j+225*k+3375*l)%n,(i+16*j+256*k+4096*l)%n,(i+17*j+289*k+4913*l)%n,(i+18*j+324*k+5832*l)%n,(i+19*j+361*k+6859*l)%n]
          genelem=[]
          for m in range(n+1):
            genelem.append(gen[m])         
          rows.append(genelem)
elif n==4:
#########################################################################################
########     Multiplication Table:
 genfour=[[0,0,0,0],
          [0,1,2,3],
          [0,2,3,1],
          [0,3,1,2]]  
########
########      Addition Table:
 genfouradd=[ 
    [0,1,2,3],
    [1,0,3,2],
    [2,3,0,1],
    [3,2,1,0]]
########
########      Squre of elements:
 genfoursquared=[]
 for m in range(n):
  genfoursquared.append(genfour[m][m]) 
########
########      Cube of elements:
 genfourcubed=[]
 for m in range(n):
  genfourcubed.append(genfour[genfoursquared[m]][m]) 
########
 def fouradd(x,y):
  result=genfouradd[x][y]
  return result
#########################################################################################
 for k in range(n):
   for i in range(n):
    for  j in range(n):
      for l in range(n):
        gen=[l]
        for m in range(n):
          x=genfour[m][j]
          y=genfour[genfoursquared[m]][k]
          z=genfour[genfourcubed[m]][l]
          gen.append(fouradd(fouradd(fouradd(i,x),y),z))
        genelem=[]
        for m in range(n+1):
          genelem.append(gen[m])         
        rows.append(genelem)  
elif n==8:  
#########################################################################################
########     Multiplication Table:
 geneight=[[0,0,0,0,0,0,0,0],
           [0,1,2,3,4,5,6,7],
           [0,2,4,6,3,1,7,5],
           [0,3,6,5,7,4,1,2],
           [0,4,3,7,6,2,5,1],
           [0,5,1,4,2,7,3,6],
           [0,6,7,1,5,3,2,4],
           [0,7,5,2,1,6,4,3]]
########
########      Addition Table:
 geneightadd=[ 
    [0,1,2,3,4,5,6,7],
    [1,0,3,2,5,4,7,6],
    [2,3,0,1,6,7,4,5],
    [3,2,1,0,7,6,5,4],  
    [4,5,6,7,0,1,2,3], 
    [5,4,7,6,1,0,3,2],
    [6,7,4,5,2,3,0,1],
    [7,6,5,4,3,2,1,0]]
########
########      Squre of elements:
 geneightsquared=[]
 for m in range(n):
  geneightsquared.append(geneight[m][m]) 
########
########      Cube of elements:
 geneightcubed=[]
 for m in range(n):
  geneightcubed.append(geneight[geneightsquared[m]][m]) 
########
 def eightadd(x,y):
  result=geneightadd[x][y]
  return result
#########################################################################################
 for k in range(n):
   for i in range(n):
    for  j in range(n):
      for l in range(n):
        gen=[l]
        for m in range(n):
          x=geneight[m][j]
          y=geneight[geneightsquared[m]][k]
          z=geneight[geneightcubed[m]][l]
          gen.append(eightadd(eightadd(eightadd(i,x),y),z))
        genelem=[]
        for m in range(n+1):
          genelem.append(gen[m])         
        rows.append(genelem) 
elif n==9:
#########################################################################################
########     Multiplication Table:
 gennine=[[0,0,0,0,0,0,0,0,0],[0,1,2,3,4,5,6,7,8],
    [0,2,1,6,8,7,3,5,4], 
    [0,3,6,2,5,8,1,4,7], 
    [0,4,8,5,6,1,7,2,3], 
    [0,5,7,8,1,3,4,6,2], 
    [0,6,3,1,7,4,2,8,5], 
    [0,7,5,4,2,6,8,3,1],
    [0,8,4,7,3,2,5,1,6]]
########
########      Addition Table:
 gennineadd=[ 
    [0,1,2,3,4,5,6,7,8],
    [1,2,0,4,5,3,7,8,6],
    [2,0,1,5,3,4,8,6,7],
    [3,4,5,6,7,8,0,1,2],
    [4,5,3,7,8,6,1,2,0],
    [5,3,4,8,6,7,2,0,1],
    [6,7,8,0,1,2,3,4,5],
    [7,8,6,1,2,0,4,5,3],
    [8,6,7,2,0,1,5,3,4]]
########
########      Squre of elements:
 genninesquared=[]
 for m in range(n):
  genninesquared.append(gennine[m][m]) 
########
########      Cube of elements:
 genninecubed=[]
 for m in range(n):
  genninecubed.append(gennine[genninesquared[m]][m]) 
########
 def nineadd(x,y):
  result=gennineadd[x][y]
  return result
#########################################################################################
 for k in range(n):
   for i in range(n):
    for  j in range(n):
      for l in range(n):
        gen=[l] 
        for m in range(n):
          x=gennine[m][j]
          y=gennine[genninesquared[m]][k]
          z=gennine[genninecubed[m]][l]
          gen.append(nineadd(nineadd(nineadd(i,x),y),z))
        genelem=[]
        for m in range(n+1):
          genelem.append(gen[m])         
        rows.append(genelem)      
else:
  print("You entered the wrong number.")   

df = pd.DataFrame(rows, columns=cols)
with pd.option_context('display.max_rows', None,'display.max_columns', None,'display.precision', 3):
  print(df) 
if checking==True:   
  okzero=0
  okone=0
  oktwo=0
  okthree=0
  cttwo=0
  pairerror=0
  for k in range(ct):
    for m in range(k+1,ct):
      j=0
      for col in cols:
        x=df.loc[k][col]
        y=df.loc[m,col]
        if x==y:
          j=j+1
      if j>3:
        pairerror=pairerror+1
      elif j==0:
        okzero=okzero+1
      elif j==1:
        okone=okone+1
      elif j==2:
        oktwo=oktwo+1
      elif j==3:
        okthree=okthree+1
      else:  
        pairerror=pairerror+1
  print("Pairs with 0 common questions:",okzero,"--Pairs with 1 Common question:",okone,"--Pairs with 2 Common questions:",oktwo,"--Pairs with 3 Common questions:",okthree,"--Pairs with error:",pairerror)
  print("Total number of pairs with no error:",okzero+okone+oktwo+okthree)
else:
  directory = 'Excel Files'
  nstr=str(n)
  file = nstr + r'Pools.xlsx'
  #%%
  if not os.path.exists(directory):
      os.makedirs(directory)
  #%%
  df.to_excel(os.path.join(directory, file))
